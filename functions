# Functions for bashrc and bash_profile
# Behold my laziness

if [ -e $DOTFILES/sourceautomation ]; then
    source $DOTFILES/sourceautomation 
fi

# Git branch for prompt
parse_git_branch()
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Restart an application $1
restart()
{
    pkill $1 && open -a $1
}

# Run ls and pipe output to grep
f()
{
    ls | grep $1
}

# Run history and pipe output to grep
h()
{
    history | grep $1
}

# Docker exec bash
ds()
{
    docker exec -it $1 bash
}

# Default ngrok use case
# Example
# ng 80 m2-test.nathaniel.dev.bolt.me
ng()
{
    cd ~
    ./ngrok http $1 --hostname=$2
    cd -
}

# Rsync magento files for docker container
# Leaving docker container as a parameter even though it's probably always the same
dockrsync()
{
    docker exec -it $1 rsync -avh --exclude 'vendor' project/ magento/app/code/Bolt/Boltpay --delete
}

# Specifically m2_php
m2phpsync()
{
    dockrsync m2_php
}

# Update m2 local...lite
# This can be used for things that don't require re-compilation.
# TODO: Parameter flag this instead
m2u()
{
    cd /Applications/MAMP/htdocs/magento2
    composer update boltpay/bolt-magento2
    php bin/magento cache:clean
    php bin/magento cache:flush
    cd -
}

# Update m2 local
m2update()
{
    cd /Applications/MAMP/htdocs/magento2

    echo "Update composer..."
    composer update boltpay/bolt-magento2 

    echo "setup:upgrade..."
    php bin/magento setup:upgrade 

    echo "setup:di:compile..."
    php bin/magento setup:di:compile 

    echo "setup:static-content:deploy -f..."
    php bin/magento setup:static-content:deploy -f 

    echo "cache:clean..."
    php bin/magento cache:clean 

    echo "cache:flush..."
    php bin/magento cache:flush 
    cd -
}

# Add all changed files to git unless path specified
function ga()
{
    if [[ $# -eq 0 ]]; then
        git add *
    else
        git add $1
    fi

    git status
}

function fancyga()
{
    git add $1:-*
    git status
}

# Navigate to right directory before running m2unit, return afterwards
function m2unit()
{
    cd ~/magento233
    php vendor/bin/phpunit -c dev/tests/unit/bolt_phpunit.xml #--coverage-html ~/coverage_html/
    cd -
}

function cdtest()
{
    regex="(\.)\1+"

    echo $regex
    if [[ $1 =~ ^regex$ ]]; then
        output=""
        len=${#1}

        while [ $len -gt 1 ]
        do
            output="${output}../"
            len=$[$len-1]
        done

        echo "cd ${output}"
    else
        echo "regex failed"
    fi

    #cd ${output}
}

#dbproxy()
#{
#    cd ~/workspace/devops
#    
#    if [[ $1 == '-h' ]]; then
#        echo "Useage: dbproxy [env] [db] [mode]"
#        return
#    fi
#
#    if [[ "$#" -ne 3 ]]; then
#        echo "Useage: dbproxy [env] [db] [mode]"
#        return
#    fi
#    
#    kubeconfig="${HOME}/.kube/${1}-njfaries-${3}"
#    
#    ./db_proxy $1 $2 $kubeconfig
#
#    cd -
#}

circleami()
{
    curl -X POST \
     "https://circleci.com/api/v2/project/github/BoltApp/source/pipeline?circle-token=${CIRCLECI_TOKEN}" \
     -H 'Accept: */*' \
     -H 'Content-Type: application/json' \
     -d '{
      "branch": "master",
      "parameters": {
       "devbox_ami_type": "interview",
       "build_devbox_amis": true
      }
     }';
}
